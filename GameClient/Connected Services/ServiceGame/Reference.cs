//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient.ServiceGame {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceGame.IGameService", CallbackContract=typeof(GameClient.ServiceGame.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Connect", ReplyAction="http://tempuri.org/IGameService/ConnectResponse")]
        System.Guid Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Connect", ReplyAction="http://tempuri.org/IGameService/ConnectResponse")]
        System.Threading.Tasks.Task<System.Guid> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/Disconnect")]
        void Disconnect(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendMsg")]
        void SendMsg(string msg, System.Guid userId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, System.Guid userId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ConnectToLobby")]
        void ConnectToLobby(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ConnectToLobby")]
        System.Threading.Tasks.Task ConnectToLobbyAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/DisconnectFromLobby")]
        void DisconnectFromLobby(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/DisconnectFromLobby")]
        System.Threading.Tasks.Task DisconnectFromLobbyAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ReadData")]
        void ReadData();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ReadData")]
        System.Threading.Tasks.Task ReadDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MsgCallBack")]
        void MsgCallBack(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/LobbyCallBack")]
        void LobbyCallBack(string msg, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/LeaderSwitchCallBack")]
        void LeaderSwitchCallBack(System.Guid leaderId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/PlayerKickedCallBack")]
        void PlayerKickedCallBack();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : GameClient.ServiceGame.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<GameClient.ServiceGame.IGameService>, GameClient.ServiceGame.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Guid Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<System.Guid> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(System.Guid id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string msg, System.Guid userId, System.Guid lobbyId) {
            base.Channel.SendMsg(msg, userId, lobbyId);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, System.Guid userId, System.Guid lobbyId) {
            return base.Channel.SendMsgAsync(msg, userId, lobbyId);
        }
        
        public void ConnectToLobby(System.Guid id) {
            base.Channel.ConnectToLobby(id);
        }
        
        public System.Threading.Tasks.Task ConnectToLobbyAsync(System.Guid id) {
            return base.Channel.ConnectToLobbyAsync(id);
        }
        
        public void DisconnectFromLobby(System.Guid id) {
            base.Channel.DisconnectFromLobby(id);
        }
        
        public System.Threading.Tasks.Task DisconnectFromLobbyAsync(System.Guid id) {
            return base.Channel.DisconnectFromLobbyAsync(id);
        }
        
        public void ReadData() {
            base.Channel.ReadData();
        }
        
        public System.Threading.Tasks.Task ReadDataAsync() {
            return base.Channel.ReadDataAsync();
        }
    }
}
